name: Auto Labeler

on:
  pull_request_target:
    types: [opened, reopened, synchronize, labeled]
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'release/**'

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Label based on changed files
        if: github.event.action != 'labeled'
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          sync-labels: true
          configuration-path: .github/labeler.yml
      
      - name: Extract PB code from branch or commit
        if: github.event_name == 'pull_request_target' && github.event.action != 'labeled'
        id: extract-pb
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          COMMIT_MSG=$(git log -1 --pretty=format:%s ${{ github.event.pull_request.head.sha }})
          
          # Extract PB code from branch name (e.g., feature/PB001-auth)
          if [[ $BRANCH_NAME =~ PB([0-9]{3}) ]]; then
            echo "pb_code=PB${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          # Extract PB code from commit message (e.g., [PB001] Add login page)
          elif [[ $COMMIT_MSG =~ PB([0-9]{3}) ]]; then
            echo "pb_code=PB${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi
      
      - name: Add PB ticket label if detected
        if: steps.extract-pb.outputs.pb_code != '' && github.event.action != 'labeled'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pbCode = '${{ steps.extract-pb.outputs.pb_code }}';
            
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [pbCode]
            });
            
      - name: Add related labels
        if: github.event.action == 'labeled'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const addedLabel = context.payload.label.name;
            const relatedLabels = [];
            
            // Define label relationships
            const labelRelationships = {
              // Ticket to category mappings
              'PB001': ['authentication', 'backend'],
              'PB002': ['authentication', 'backend'],
              'PB003': ['authentication', 'backend'],
              'PB004': ['authentication', 'backend', 'super-admin'],
              'PB005': ['super-admin', 'backend'],
              'PB006': ['super-admin', 'backend'],
              'PB007': ['super-admin', 'backend'],
              'PB009': ['super-admin', 'ai-ml', 'backend'],
              'PB010': ['admin-backoffice', 'backend', 'front-backoffice'],
              'PB011': ['admin-backoffice', 'backend', 'front-backoffice'],
              'PB012': ['admin-backoffice', 'backend', 'front-backoffice'],
              'PB013': ['admin-backoffice', 'backend', 'front-backoffice'],
              'PB014': ['admin-backoffice', 'backend', 'front-backoffice'],
              'PB015': ['admin-backoffice', 'ai-ml'],
              'PB016': ['real-estate-agent', 'backend', 'front-backoffice'],
              'PB017': ['real-estate-agent', 'backend', 'front-backoffice'],
              'PB018': ['real-estate-agent', 'ai-ml'],
              'PB019': ['real-estate-agent', 'backend', 'front-backoffice'],
              'PB020': ['real-estate-agent', 'backend', 'front-backoffice'],
              'PB021': ['investor-mobile', 'front-mobile'],
              'PB022': ['investor-mobile', 'front-mobile'],
              'PB023': ['investor-mobile', 'front-mobile'],
              'PB024': ['investor-mobile', 'front-mobile'],
              'PB025': ['investor-mobile', 'front-mobile'],
              'PB026': ['investor-mobile', 'front-mobile', 'ai-ml'],
              'PB027': ['investor-mobile', 'front-mobile', 'ai-ml'],
              'PB028': ['investor-mobile', 'front-mobile', 'ai-ml'],
              'PB029': ['investor-mobile', 'front-mobile'],
              'PB030': ['ai-ml'],
              'PB031': ['ai-ml'],
              'PB032': ['ai-ml'],
              'PB033': ['ai-ml'],
              'PB034': ['ai-ml', 'system-security'],
              'PB035': ['blockchain-contracts'],
              'PB036': ['blockchain-contracts'],
              'PB037': ['blockchain-contracts'],
              'PB038': ['blockchain-contracts'],
              'PB039': ['blockchain-contracts'],
              'PB040': ['system-security', 'backend'],
              'PB041': ['system-security', 'backend'],
              'PB042': ['system-security', 'backend'],
              'PB043': ['system-security', 'backend', 'ai-ml'],
              'PB044': ['devops-infrastructure'],
              'PB045': ['devops-infrastructure'],
              'PB046': ['devops-infrastructure'],
              'PB047': ['devops-infrastructure'],
              'PB048': ['devops-infrastructure'],
              'PB049': ['devops-infrastructure'],
              'PB050': ['devops-infrastructure'],
              'PB051': ['devops-infrastructure'],
              'PB052': ['devops-infrastructure'],
              'PB053': ['mobile-ux', 'front-mobile'],
              'PB054': ['mobile-ux', 'front-mobile'],
              'PB055': ['mobile-ux', 'front-mobile'],
              
              // Category to related categories
              'authentication': ['backend'],
              'super-admin': ['backend', 'front-backoffice'],
              'admin-backoffice': ['backend', 'front-backoffice'],
              'real-estate-agent': ['backend', 'front-backoffice'],
              'investor-mobile': ['front-mobile'],
              'mobile-ux': ['front-mobile'],
              'system-security': ['backend']
            };
            
            // Check if the added label has related labels defined
            if (labelRelationships[addedLabel]) {
              relatedLabels.push(...labelRelationships[addedLabel]);
            }
            
            // Only proceed if we have related labels to add
            if (relatedLabels.length > 0) {
              console.log(`Adding related labels for ${addedLabel}: ${relatedLabels.join(', ')}`);
              
              // Add the related labels
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: relatedLabels
              });
            }
            
      - name: Assign reviewer and create summary comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request_target'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function main() {
              // Get current PR labels
              const { data: prLabels } = await github.rest.issues.listLabelsOnIssue({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Extract label names
              const labelNames = prLabels.map(label => label.name);
              
              // Look for PB ticket labels (format: "PB001", "PB002", etc.)
              const ticketLabels = labelNames.filter(label => /^PB\d{3}$/.test(label));
              
              // Only proceed if there's at least one ticket label
              if (ticketLabels.length === 0) {
                console.log("No ticket labels found, skipping assignment and comment");
                return;
              }
              
              // Label descriptions mapping
              const labelDescriptions = {
                // Ticket descriptions
                'PB001': 'Create account & secure auth',
                'PB002': 'Profile management',
                'PB003': 'Secure logout',
                'PB004': 'Multi-company admin management',
                'PB005': 'Security / compliance dashboard',
                'PB006': 'Global configuration panel',
                'PB007': 'Analytics & reports',
                'PB009': 'Secure AI assistant access',
                'PB010': 'Listing management',
                'PB011': 'Agent permissions',
                'PB012': 'Transactions & commissions',
                'PB013': 'Investor support inbox',
                'PB014': 'Agency analytics dashboard',
                'PB015': 'AI-powered valuation',
                'PB016': 'Create/manage listings',
                'PB017': 'Investments & purchases',
                'PB018': 'Data for AI',
                'PB019': 'Client CRM',
                'PB020': 'View commissions',
                'PB021': 'Browse listings',
                'PB022': 'Advanced search / filters',
                'PB023': 'Simple invest flow',
                'PB024': 'Real-time portfolio',
                'PB025': 'Secure payments',
                'PB026': 'AI property recommendations',
                'PB027': 'AI legal Q&A',
                'PB028': 'Earnings prediction',
                'PB029': 'Manage earnings & withdrawals',
                'PB030': 'Personalized recommender',
                'PB031': 'Valuation & rent predictor',
                'PB032': 'Investment forecasting',
                'PB033': 'NLP legal info',
                'PB034': 'Secure AI DB access',
                'PB035': 'Virtual contracts',
                'PB036': 'Investor asset security',
                'PB037': 'Admin transaction verify',
                'PB038': 'Immutable records',
                'PB039': 'Chain health monitoring',
                'PB040': 'Automated auth/session manager',
                'PB041': 'Real-time notifications',
                'PB042': 'Transaction consistency',
                'PB043': 'Secure AI↔DB comms',
                'PB044': 'CI/CD',
                'PB045': 'Deploy images to GCP registry',
                'PB046': 'Auto-deploy back-end & DB',
                'PB047': 'Dockerize components',
                'PB048': 'Auto-deploy web frontend',
                'PB049': 'Auto-deploy mobile app',
                'PB050': 'Mobile versioning',
                'PB051': 'System health monitoring',
                'PB052': 'Env configuration manager',
                'PB053': 'Responsive intuitive UI',
                'PB054': 'Push notifications',
                'PB055': 'Offline portfolio access',
                
                // Category descriptions
                'authentication': 'Authentication & User Management',
                'super-admin': 'Super-Admin Features',
                'admin-backoffice': 'Admin Back-office Features',
                'real-estate-agent': 'Real-Estate Agent Features',
                'investor-mobile': 'Investor Mobile Features',
                'ai-ml': 'AI & Machine Learning Features',
                'blockchain-contracts': 'Blockchain & Smart Contracts',
                'system-security': 'System & Security Features',
                'devops-infrastructure': 'DevOps & Infrastructure',
                'mobile-ux': 'Mobile-Specific UX',
                'backend': 'Backend Components',
                'front-backoffice': 'Backoffice Frontend Components',
                'front-mobile': 'Mobile Frontend Components',
                'ai': 'AI Components',
                'blockchain': 'Blockchain Components',
                'docs': 'Documentation',
                'tests': 'Testing Components'
              };
              
              // Find component labels (these are the main project areas)
              const componentLabels = labelNames.filter(label => 
                ['backend', 'front-backoffice', 'front-mobile', 'ai', 'blockchain'].includes(label)
              );
              
              // Find category labels
              const categoryLabels = labelNames.filter(label => 
                ['authentication', 'super-admin', 'admin-backoffice', 'real-estate-agent', 
                 'investor-mobile', 'ai-ml', 'blockchain-contracts', 'system-security',
                 'devops-infrastructure', 'mobile-ux'].includes(label)
              );
              
              // Create a structured comment
              let comment = `## 🔄 PR Auto-Review Assignment\n\n`;
              
              // Add ticket information
              if (ticketLabels.length > 0) {
                comment += `### 🎫 Ticket Information\n\n`;
                ticketLabels.forEach(ticket => {
                  comment += `- **${ticket}**: ${labelDescriptions[ticket] || 'No description available'}\n`;
                });
                comment += `\n`;
              }
              
              // Add component information
              if (componentLabels.length > 0) {
                comment += `### 🧩 Components\n\n`;
                componentLabels.forEach(component => {
                  comment += `- **${component}**: ${labelDescriptions[component] || 'No description available'}\n`;
                });
                comment += `\n`;
              }
              
              // Add category information
              if (categoryLabels.length > 0) {
                comment += `### 📋 Categories\n\n`;
                categoryLabels.forEach(category => {
                  comment += `- **${category}**: ${labelDescriptions[category] || 'No description available'}\n`;
                });
                comment += `\n`;
              }
              
              comment += `This PR has been automatically assigned to @ahmedjaziri31 for review based on the detected ticket and categories.`;
              
              // Add the comment to the PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              // Assign ahmedjaziri31 as reviewer
              await github.rest.pulls.requestReviewers({
                pull_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                reviewers: ['ahmedjaziri31']
              });
              
              console.log("Assigned ahmedjaziri31 as reviewer and added summary comment");
            }
            
            // Run the main function
            main();
