name: Backend CI/CD to Google Cloud Run

# --- Trigger Conditions ---
on:
  push:
    branches: [ main ] # Deploy when pushing to the main branch
    paths:
      - 'backend/**' # Only run if files in the backend folder change

# --- Environment Variables ---
env:
  GCP_PROJECT_ID: 'cellular-way-454315-f2' # Your GCP Project ID
  GCP_REGION: 'us-central1' # The region where your Cloud Run service is
  CLOUD_RUN_SERVICE_NAME: 'korpor' # The name of your Cloud Run service
  GAR_REPOSITORY: 'korpor-backend-images' # Define Artifact Registry repo name
  IMAGE_NAME: 'backend-service' # Define the image name within the repo
  # Manually construct the full Artifact Registry image path using defined values
  GAR_IMAGE_PATH: us-central1-docker.pkg.dev/cellular-way-454315-f2/korpor-backend-images/backend-service

# --- Concurrency Control ---
# Ensure only one run happens at a time for the main branch push trigger
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# --- Jobs ---
jobs:
  # --- Job 1: Build, Test, and Push Docker image to Artifact Registry ---
  build-and-push-gar:
    runs-on: ubuntu-latest
    defaults:
      run:
        # Set the working directory to your backend folder
        working-directory: ./backend
    permissions:
      contents: read
      # Required for Artifact Registry auth
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        # Ensure this matches the Node.js version your backend needs
        node-version: '18'

    - name: Install dependencies
      # Add --ignore-scripts to prevent root prepare script (husky) from running
      run: npm install --legacy-peer-deps --ignore-scripts

    # --- Optional Linting/Testing Steps ---
    # Uncomment these if you have lint/test scripts in backend/package.json
    # - name: Run Linters
    #   run: npm run lint
    # - name: Run Tests
    #   run: npm test

    # Authenticate Docker to Google Artifact Registry
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        # Export the SA key to a file path for easy access
        export_environment_variables: true
        create_credentials_file: true

    # Add debugging steps to check authentication and repository access
    - name: Debug - Check GCP authentication
      run: |
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq
        
        gcloud config list
        gcloud projects describe ${{ env.GCP_PROJECT_ID }}
        
        # Check if required APIs are enabled
        echo "Checking if Artifact Registry API is enabled..."
        gcloud services list --project=${{ env.GCP_PROJECT_ID }} | grep artifactregistry.googleapis.com || \
          (echo "Artifact Registry API is not enabled, enabling now..." && \
           gcloud services enable artifactregistry.googleapis.com --project=${{ env.GCP_PROJECT_ID }})

    - name: Ensure project-level permissions
      run: |
        # Create a file with the service account key for processing
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa-key.json
        
        # Extract the service account email from the JSON key
        SA_EMAIL=$(jq -r '.client_email' /tmp/sa-key.json)
        echo "Authenticated as: $SA_EMAIL"
        
        if [ -z "$SA_EMAIL" ]; then
          echo "Error: Failed to extract service account email from credentials"
          exit 1
        fi
        
        # Verify and add the Artifact Registry Admin role at the project level
        echo "Ensuring Artifact Registry Admin role..."
        gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/artifactregistry.admin"
          
        # Add the Storage Admin role just to be safe (covers older Container Registry too)
        echo "Ensuring Storage Admin role..."
        gcloud projects add-iam-policy-binding ${{ env.GCP_PROJECT_ID }} \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/storage.admin"
        
        # Clean up the temporary file
        rm /tmp/sa-key.json

    - name: Debug - Check and fix Artifact Registry permissions
      run: |
        # Extract service account email again (couldn't pass between steps)
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa-key.json
        SA_EMAIL=$(jq -r '.client_email' /tmp/sa-key.json)
        echo "Authenticated as: $SA_EMAIL"
        
        if [ -z "$SA_EMAIL" ]; then
          echo "Error: Failed to extract service account email from credentials"
          exit 1
        fi
        
        # Check if the repository exists
        gcloud artifacts repositories describe ${{ env.GAR_REPOSITORY }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --location=${{ env.GCP_REGION }} || \
          (echo "Creating repository..." && \
           gcloud artifacts repositories create ${{ env.GAR_REPOSITORY }} \
             --repository-format=docker \
             --location=${{ env.GCP_REGION }} \
             --description="Repository for backend images")
             
        # Grant permissions using the extracted service account email
        echo "Ensuring service account has proper permissions..."
        gcloud artifacts repositories add-iam-policy-binding ${{ env.GAR_REPOSITORY }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --location=${{ env.GCP_REGION }} \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/artifactregistry.writer"
          
        # Clean up the temporary file
        rm /tmp/sa-key.json

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet
        
    # This step creates a Docker credential helper that will properly authenticate with Artifact Registry
    - name: Set up Docker credentials to Artifact Registry
      run: |
        # Using the credentials file created by google-github-actions/auth
        cat $GOOGLE_APPLICATION_CREDENTIALS | docker login -u _json_key --password-stdin https://${{ env.GCP_REGION }}-docker.pkg.dev
        
        # Verify Docker can access the registry
        echo "Verifying Docker registry access..."
        docker pull hello-world || echo "Could not pull hello-world, but continuing..."

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image to Artifact Registry
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: ./backend # Build context root (./backend)
        file: ./backend/Dockerfile # Path relative to context
        push: true
        # Use the Artifact Registry image path
        tags: ${{ env.GAR_IMAGE_PATH }}:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
        # Enable Docker layer caching
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # --- Job 2: Deploy the image to Google Cloud Run ---
  deploy-to-cloud-run:
    needs: build-and-push-gar # Run after building/pushing
    runs-on: ubuntu-latest
    # Permissions needed for GCP auth and deployment
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
    # Authenticate using the same method as the build job
    - name: Authenticate to Google Cloud via SA Key
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.CLOUD_RUN_SERVICE_NAME }}
        region: ${{ env.GCP_REGION }}
        # Deploy the image from Artifact Registry
        image: ${{ env.GAR_IMAGE_PATH }}:${{ github.sha }}

    # Optional: Output the deployed service URL
    - name: Show Deployed URL
      if: success() # Only run if deployment step succeeds
      run: echo "Deployed successfully to ${{ steps.deploy.outputs.url }}"

    # Add step to test the health endpoint
    - name: Test Deployed Service Health Endpoint
      if: success() # Only run if deployment step succeeded
      run: curl --fail --silent --show-error ${{ steps.deploy.outputs.url }}/health